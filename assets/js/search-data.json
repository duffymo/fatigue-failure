{
  
    
        "post0": {
            "title": "Title",
            "content": "# Heat Transfer Analysis Of The Grinding Process &gt; &quot;A dissertation submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy at The University of Connecticut by Michael O. Duffy 1992&quot; - toc: false - branch: master - badges: true - comments: true - categories: [fastpages, jupyter] - image: images/dissertation/creep-feed-grinding.jpeg - hide: false - search_exclude: true - ide: DataSpell Prediction of the temperature history of a workpiece for a given set of grinding process parameters has been studied for roughly forty years. A variety of simplifications and assumptions have been made regarding the behavior of the workpiece, and its interaction with the grinding wheel and coolant, in order to make the problem tractable. This dissertation builds on previous work in a number of ways. The first extension is a closed-form solution for the effect of the grinding wheel on the workpiece, allowing for finite radius and thickness, and for arbitrary distribution of flux around the circumference. This difficult boundary-value problem is captured in a form similar to non-dimensional correlations used in fluid convection, allowing easy evaluation for a wide range of disk configurations based on three non-dimensional groups. The second extension is ease with which this closed-form solution can be incorporated into commercially-available finite element software, which eliminates the need for discretization of the grinding wheel. The third and final extension is the framework provided for incorporation of the effects of the grinding fluid delivery on process heat transfer. Future research can be used to quantify the functional relationship between the appropriate coolant delivery variables and the Biot number applied to the grinding wheel model. Use of the finite element method as the model of choice for conduction allows workpieces of arbitrarily complex geometry, temperature-dependent material properties, and spatially- and temporally-varying boundary conditions to be modeled as accurately as computer resources will allow. Both analytical and experimental results included in this study show that the workpiece is extremely sensitive to changes in boundary conditions, suggesting that previously reported results for energy partition and limiting power flux must be carefully examined. Past results may not be generally applicable to configurations substantially different from the experimental conditions under which they were measured. ## Introduction The creation of useful objects by bringing two materials of different hardnesses into contact is as old as human history, and as fundamental to our civilization as fire or agriculture. This process of controlled removal of material has evolved from rubbing two stones together to the modern machine shop, which includes milling, turning, and grinding in its repertoire. For a brief but excellent summary of the history of grinding, see ## Theory ## Applications ## Discussion ## Conclusions ## Appendix",
            "url": "/fatigue-failure/2021/05/27/duffy-dissertation.html",
            "relUrl": "/2021/05/27/duffy-dissertation.html",
            "date": " • May 27, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "# First Jupyter Notebook Tutorial With DataSpell &gt; &quot;A simple tutorial to help get started with Jupyter notebook and DataSpell&quot; - toc: false - branch: master - badges: true - comments: true - categories: [fastpages, jupyter] - image: images/simple-tutorial/novice-to-expert.jpeg - hide: false - search_exclude: true - ide: DataSpellThis is my first attempt at using Jupyter notebook. My goal is to learn fast.ai, but one must walk before running. Best to begin with a Jupyter notebook. I found a [tutorial](https://www.dataquest.io/blog/j#upyter-notebook-tutorial/) that introduces both markdown and calculations. I also downloaded DataSpell, an early access IDE for data science from JetBrains. I think their IntelliJ IDE for Java is the best tool on the market. I wanted to see if their new tool could provide a similar boost for my venture into data science. Every language has a “Hello World”. Jupyter notebook is no different. Let’s create a cell: print(&#39;Hello World!&#39;) . Hello World! . import time time.sleep(3) . So far, so good. Adding cells with markdown and code. This is a nice environment. DataSpell is making it fun. Let&#39;s add a function: . def say_hello(recipient): return &#39;Hello, {}!&#39;.format(recipient) say_hello(&#39;Michael&#39;) . &#39;Hello, Michael!&#39; . Jupyter notebook does a great job of keep code and documentation together. It&#39;s a scientific revolution. I think this is the best hope we have for maintaining that scientific ideal of making results public and easily reproducible by others. . I&#39;ll have to dig into LaTeX for math typesetting. What does that look like? . Euler&#39;s identity: $$e^{i pi} + 1 = 0$$ $$ frac{arg 1}{arg 2}$$ $$x^2$$ $$e^{i pi}$$ $$A_i$$ $$B_{ij}$$ $$ sqrt[n]{arg}$$ . Here&#39;s a linear equation: . $$ hat{Y} = hat{ beta_0} + sum_{j=1}^p hat{ beta}_j X_j $$ . The tutorial has a bunch of markdown examples that aren&#39;t hard to understand. No sense memorizing these. I&#39;ll Google them when I need them. . Level 1 heading . Level 2 heading . Text is easy to format: . bold italic . Lists are simple: . First element | Second element | First bullet | Second bullet | . I created hyperlinks earlier. . It&#39;s easy to add code. I hope to be able to add Python, R, and Kotlin someday soon. . fun foo() . Here&#39;s a code block: . fun bar() = &quot;This could be some Kotlin code&quot; . You can also tab in: . fun baz(): return &#39;A Python string&#39; . What about images? Let&#39;s add an image of a dog: . . That&#39;s enough markdown. This is about code. Does DataSpell give me access to numpy? . import numpy as np def square(q): return q*q x = 4 y = square(x) print(&#39;%d squared is %d&#39; % (x, y)) . 4 squared is 16 . Now I have numpy. The tutorial tells me that there are kernels for over 100 languages, including Java, C, Fortran, R, and Kotlin. There&#39;s an SoS kernel that provides multi-language support within a single notebook. I&#39;ll stick to Python for now, but I can&#39;t wait to try out both R and Kotlin. . Enough about notebook mechanics. What about a real analysis? . The tutorial problem uses a Fortune 500 data set. . %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&quot;darkgrid&quot;) df = pd.read_csv(&#39;../datasets/fortune500.csv&#39;) df.head() . Year Rank Company Revenue (in millions) Profit (in millions) . 0 | 1955 | 1 | General Motors | 9823.5 | 806 | . 1 | 1955 | 2 | Exxon Mobil | 5661.4 | 584.8 | . 2 | 1955 | 3 | U.S. Steel | 3250.4 | 195.4 | . 3 | 1955 | 4 | General Electric | 2959.1 | 212.6 | . 4 | 1955 | 5 | Esmark | 2510.8 | 19.1 | . df.tail() . Year Rank Company Revenue (in millions) Profit (in millions) . 25495 | 2005 | 496 | Wm. Wrigley Jr. | 3648.6 | 493 | . 25496 | 2005 | 497 | Peabody Energy | 3631.6 | 175.4 | . 25497 | 2005 | 498 | Wendy&#39;s International | 3630.4 | 57.8 | . 25498 | 2005 | 499 | Kindred Healthcare | 3616.6 | 70.6 | . 25499 | 2005 | 500 | Cincinnati Financial | 3614.0 | 584 | . df.columns = [&#39;year&#39;, &#39;rank&#39;, &#39;company&#39;, &#39;revenue&#39;, &#39;profit&#39;] len(df) . 25500 . df.dtypes . year int64 rank int64 company object revenue float64 profit object dtype: object . Profit should be a float; instead, it&#39;s an object. There must be non-integer values in that column. . non_numeric_profits = df.profit.str.contains(&#39;[^0-9.-]&#39;) df.loc[non_numeric_profits].head() . year rank company revenue profit . 228 | 1955 | 229 | Norton | 135.0 | N.A. | . 290 | 1955 | 291 | Schlitz Brewing | 100.0 | N.A. | . 294 | 1955 | 295 | Pacific Vegetable Oil | 97.9 | N.A. | . 296 | 1955 | 297 | Liebmann Breweries | 96.0 | N.A. | . 352 | 1955 | 353 | Minneapolis-Moline | 77.4 | N.A. | . set(df.profit[non_numeric_profits]) . {&#39;N.A.&#39;} . There are values that are NA. How many? . len(df.profit[non_numeric_profits]) . 369 . That&#39;s a small fraction of total data set: . len(df.profit[non_numeric_profits])/len(df) . 0.014470588235294117 . The easiest thing to do is to discard the bad records. How are they distributed? . bin_sizes, _, _ = plt.hist(df.year[non_numeric_profits], bins=range(1955,2006)) . The most invalid cases in a single year is fewer than 25. Since there are 500 points per year, removing these values would account for less than 4% of the data for the worst years. Let&#39;s remove these rows: . df = df.loc[-non_numeric_profits] df.profit = df.profit.apply(pd.to_numeric) len(df) . 25131 . Let&#39;s check the types: . df.dtypes . year int64 rank int64 company object revenue float64 profit float64 dtype: object . The final presentation notebook shouldn&#39;t leave all these exploratory cells, but I want to be able to see them. . Finally! It&#39;s time to analyze some data. Plot profit and revenue by year: . group_by_year = df.loc[:, [&#39;year&#39;, &#39;revenue&#39;, &#39;profit&#39;]].groupby(&#39;year&#39;) avgs = group_by_year.mean() x = avgs.index y1 = avgs.profit def plot(x, y, ax, title, y_label): ax.set_title(title) ax.set_ylabel(y_label) ax.plot(x, y) ax.margins(x = 0, y = 0) fig, ax = plt.subplots() plot(x, y1, ax, &#39;Increase in mean Fortune 500 profits from 1955 to 2005&#39;, &#39;Profit (millions)&#39;) . y2 = avgs.revenue fig, ax = plt.subplots() plot(x, y2, ax, &#39;Increase in mean Fortune 500 company revenues from 1955 to 2005&#39;, &#39;Revenue (millions)&#39;) . Revenues have taken off since around 1995. . Let&#39;s superimpose +/- standard deviations on top of these plots. The code comes from a post on Stack Overflow . def plot_with_std(x, y, stds, ax, title, y_label): ax.fill_between(x, y - stds, y + stds, alpha=0.2) plot(x, y, ax, title, y_label) fig, (ax1, ax2) = plt.subplots(ncols=2) title = &#39;Increase in mean and std Fortune 500 company %s from 1955 to 2005&#39; stds1 = group_by_year.std().profit.values stds2 = group_by_year.std().revenue.values plot_with_std(x, y1.values, stds1, ax1, title % &#39;profits&#39;, &#39;Profit (millions)&#39;) plot_with_std(x, y2.values, stds2, ax2, title % &#39;revenues&#39;, &#39;Revenue (millions)&#39;) fig.set_size_inches(14, 4) fig.tight_layout() . Profits have been rising steadily, at a rate increased markedly around 1995. There are lots of winners and losers here. That&#39;s enough of this tutorial. There are others to dig into. I also have two tasks in front of me: 1. Start working through fast.ai and learn neural networks. 2. I&#39;ve lost an electronic copy of my dissertation. I&#39;d like to typeset it in markdown to practice LaTeX. It&#39;s be terrific fun to rewrite the C code in Python or Kotlin.",
            "url": "/fatigue-failure/2021/05/22/jupyter-notebook-tutorial.html",
            "relUrl": "/2021/05/22/jupyter-notebook-tutorial.html",
            "date": " • May 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Craic Initiation",
            "content": "Introduction . This is my first post for Fatigue Failure. . I had a blog called Craic Propagation for years on Blogspot. It satisfied my urge to write. I focused on a narrow list of topics: fitness, technology, self-improvement, public speaking. . I’m beginning another effort here that I’m calling Fatigue Failure. It will be more focused on fast.ai and machine learning. . I’ve obtained a copy of “Deep Learning for Coders with fastai and PyTorch” by Jeremy Howard &amp; Slyvain Gugger. I’ve watched all the videos once. Now it’s time to carefully work through the code and internalize how to work with fast.ai. . I set up this blog on GitHub pages using Appendix A instructions from the book. The template allows me to write with markdown, LaTeX, and include Jupyter notebooks. I want to hold myself accountable by making my progress public. It’s easier to make progress when it’s measured. . My goal is to learn how to do machine learning well enough to enter Kaggle competitions, create and deploy models. . Let’s begin. .",
            "url": "/fatigue-failure/markdown/2021/04/26/craic-initiation.html",
            "relUrl": "/markdown/2021/04/26/craic-initiation.html",
            "date": " • Apr 26, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . NameError Traceback (most recent call last) &lt;ipython-input-1-d9912baa4fa2&gt; in &lt;module&gt; -&gt; 1 alt.Chart(df).mark_circle().add_selection( 2 alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) 3 ).encode( 4 alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), 5 alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), NameError: name &#39;alt&#39; is not defined . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/fatigue-failure/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "/fatigue-failure/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "/fatigue-failure/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/fatigue-failure/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}